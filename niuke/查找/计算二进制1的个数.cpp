/**
题目描述
输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
*/

//基本思路 移位运算
/**
首先判断n是不是负数，当n为负数的时候，直接用后面的while循环会导致死循环，因为负数
向左移位的话最高位补1 ！ 因此需要一点点特殊操作，可以将最高位的符号位1变成0，也就
是n & 0x7FFFFFFF，这样就把负数转化成正数了，唯一差别就是最高位由1变成0，因为少了
一个1，所以count加1。之后再按照while循环里处理正数的方法来操作就可以啦！
*/

#include <iostream>
#include <Vector>
#include <Stack>
using namespace std;

class Solution {
public:
 
     int  NumberOf1(int n) {
        int temp = 0;
        if (n < 0)
        {
            // 说实在的，这里没有想到如何处理把负数变成正数
            // 这里是直接把符号位给处理了，从0变成1，然后当做正数进行移位处理
            n = n & 0x7FFFFFFF;
            ++temp;
        }
        while(n != 0)
        {
            // 与操作，判断最后一位是不是1
            temp += n & 1;
            // 然后移位
            n = n >> 1;
        }
        cout << temp << endl;
        
     }

// 高级的解题思路
/**
如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，
那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。
举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，
而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。
如1100&1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。
不用去考虑负数如何整理；
 */
 int NumberOf1_(int n) {
        int count = 0;
        while(n!= 0){
            count++;
            n = n & (n - 1);
         }
        return count;
    }

};

int main()
{
    Solution s;
    
    s.NumberOf1(-2);

    return 0;
}
