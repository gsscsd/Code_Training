/**
题目描述
写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。
*/

/**
解题思路：
很明显考察的是位运算
基本思路如下
先用异或计算不进位的数
再用位与计算进位的数，并将进位的数与不进位的数加起来、
循环计算，直到，进位的数为0

首先看十进制是如何做的： 5+7=12，三步走
第一步：相加各位的值，不算进位，得到2。
第二步：计算进位值，得到10. 如果这一步的进位值为0，那么第一步得到的值就是最终结果。

第三步：重复上述两步，只是相加的值变成上述两步的得到的结果2和10，得到12。

同样我们可以用三步走的方式
计算二进制值相加： 5-101，7-111 第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。

第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&111)<<1。

第三步重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&1010)<<1。
     继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。
*/

#include <iostream>

using namespace std;

class Solution {
public:
    // 递归的写法
    int Add(int num1, int num2)
    {
        if(num2 == 0) return num1;
        else
        {
            // 计算未进位的数
            int S = num1 ^ num2 ;
            // 计算进位的数
            int c = (num1 & num2) << 1;
            // 将进位和未进位的递归计算
            return Add(S,c);
        }

    }
    // 这里是采用迭代的方法
    int add(int num1, int num2)
    {
        // 异或计算未进位的值
        int sum = num1 ^ num2;
        // 与操作，计算进位的数
        int carry = (num1 & num2) << 1;  
        // 如果一直存在进位数，就循环
        while(carry != 0){
            int a = sum;
            int b = carry;
            sum = a ^ b;
            carry = (a & b) << 1;  
        }
        return sum;
    }

};

int  main(int argc, char const *argv[])
{
        /* code */
        return 0;
}


